..  Copyright (C)  Barbara Ericson Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation.  A copy of the license is included in the section entitled "GNU Free Documentation
License".

..  shortname:: JavaReview
..  description:: A review of Java basics for the AP CS A exam  

.. qnum::
:prefix: trl-
:start: 1

.. _review_Java_basics:

.. index::
single: programming language
single: class
single: object
single: variable
single: binary 
single: integer
single: type
single: loop
single: conditional


What is Java?
===============

Java is a **programming language**, which means that we can use Java to tell a computer what to do.  Computers don't actually speak Java so we have to 
compile Java source files (they end in .java) into class files (they end in .class).  All Java programs must be part of a **class** and the class name must match the file name.  The tool that we use to compile a Java source file into a Java class file is called a **compiler**.  I recommend using an **Integrated Development Environment** (IDE) for writing Java source code. An IDE helps you write, compile, run, and debug programs.  I recommend using DrJava (from DrJava.org).  It is free and easy to use.  I particularly like the interactions pane which lets you try out Java code without having to create a class first.

What is a Class and an Object?
==============================

What is a **class**?  If you go to a restaurant you will be seated by the greeter, the waiter will take your order, and the chef will cook your food.  What do we mean by a greeter, waiter, and chef?  Those are classifications or types of workers in a restaurant.  Java has this same concept.  When we create a new class we are defining a new type (a new classification) to the computer.  Each type can have abilities (called methods in Java) and properties (called fields in Java). After you define a type you can use it to create **objects** of that type.  All objects created from a class will have the properties and abilities defined in that class.  All waiters know how to take your order and deliver food.  All greeters know how to check the seating chart for open tables and can walk you to your table.  
Even though every object of a class has the same properties the values for those properties will often be different.  All waiters will have a name, but the names can all be different. 

**Check your understanding**

.. mchoicemf:: q1_1
:answer_a: Yes
:answer_b: No
:correct: b
:feedback_a: While a class can have both fields and methods, it is not required to have both.  Some classes are created to test other classes and only contain one method.
:feedback_b: A class can have both fields and methods, it doesn't have to have both. 

Does a class have to have both fields and methods?  

**Check your understanding**

.. mchoicemf:: q1_2
:answer_a: Yes 
:answer_b: No 
:correct: a
:feedback_a: A Java class must have the same name as the file name.  A class named 'Foo' must be in a file 'Foo.java'.    
:feedback_b: A Java class must have the same name as the file name.  A class named 'Foo' must be in a file 'Foo.java'.  

Does the file name for a class have to match the class name? 

.. mchoicemf:: q1_3
:answer_a: You can only create one object from a class.
:answer_b: An object is a definition of a type.
:answer_c: An object can only be created by a class.   
:correct: c 
:feedback_a: You can create many objects from the same class.  Just like having many waiters in a restaurant.  
:feedback_b: A class defines a type, not an object.
:feedback_c: Yes, the class creates the object.  The class contains the definition of what all objects of that class need to be able to do and know.

Which of the following is true about objects? 

.. mchoicemf:: q1_4
:answer_a: It is something the object knows or keeps track of.  
:answer_b: It is something the object can do.
:answer_c: It defines the type of the object.
:correct: a
:feedback_a: A field stores data for an object.  You can think of it as a property of the object. 
:feedback_b: A method is something that an object do.  It is an ability or behavior of the object.  
:feedback_c: The type of an object is the class that created it. 

Which of the following is true about a field in Java?

Variables in Java
==============================

A **variable** is named space in the computer that can store a value and that value can change or vary.  When you play a game it will often have a score.  Scores often start at 0 and increase.  A score is a variable.  

There are two types of variables in Java: primitive variables and object variables.  Primitive variables include integers (whole numbers like 3, -76, 20393), floating point numbers (like 6.3 -0.9, and 60293.93032), and Boolean values (either true or false).  
To create a variable you must tell Java its type and name.  When you create a primitive variable Java will set aside space for that type and associate that space with the name that you used.  You have to tell Java the type of the variable because Java needs to know how much space to use and how to represent the value.  The 3 different primitive types
are all represented using **binary numbers** (numbers that only contain the digits 0 and 1) but are represented in different ways.  

To declare (create) a variable you will specify the type and then the name and end a semicolon.  Think of the semicolon in Java like a period (**.**) in English.  It is how you show the end of a sentence in English.  You use a semicolon (**;**) to show the end of a Java statement.  
The primitive types are: **int** for an integer, **double** for a floating point number, and **boolean** for a Boolean value (true or false).

::

>>> int numberOfTurns;
>>> double price;
>>> boolean wonGame;

You can also optionally specify an initial value for the variable by adding an equals sign **=** followed by the value. 

::

>>> int numberOfTurns = 4;
>>> double price = 23.25;
>>> boolean wonGame = false;








